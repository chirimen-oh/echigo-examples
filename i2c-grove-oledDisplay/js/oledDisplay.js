// Source : http://wiki.seeedstudio.com/wiki/Grove_-_OLED_Display_128*64

const OLED_CONST = {
  BasicFont : [
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00],
    [0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00],
    [0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00],
    [0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00],
    [0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00],
    [0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00],
    [0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00],
    [0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00],
    [0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00],
    [0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00],
    [0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
    [0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00],
    [0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00],
    [0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00],
    [0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00],
    [0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00],
    [0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00],
    [0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00],
    [0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00],
    [0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00],
    [0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00],
    [0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00],
    [0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00],
    [0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00],
    [0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00],
    [0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00],
    [0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00],
    [0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00],
    [0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00],
    [0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00],
    [0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00],
    [0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00],
    [0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00],
    [0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00],
    [0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00],
    [0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00],
    [0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00],
    [0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00],
    [0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00],
    [0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00],
    [0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00],
    [0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00],
    [0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00],
    [0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00],
    [0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00],
    [0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00],
    [0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00],
    [0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00],
    [0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00],
    [0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00],
    [0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00],
    [0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00],
    [0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00],
    [0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00],
    [0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00],
    [0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00],
    [0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00],
    [0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00],
    [0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00],
    [0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00],
    [0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00],
    [0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00],
    [0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00],
    [0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00],
    [0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00],
    [0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00],
    [0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00],
    [0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00],
    [0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00],
    [0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00],
    [0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00],
    [0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00],
    [0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00],
    [0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00],
    [0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00],
    [0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00],
    [0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00],
    [0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00],
    [0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00],
    [0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00],
    [0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00],
    [0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00],
    [0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00],
    [0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00],
    [0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00],
    [0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00],
    [0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00],
    [0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00],
    [0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00]
  ],
  Address : 0x3c,
  Max_X : 127,
  Max_Y : 63,
  PAGE_MODE : 1,
  HORIZONTAL_MODE : 2,
  Command_Mode : 0x80,
  Data_Mode : 0x40,
  Display_Off_Cmd : 0xAE,
  Display_On_Cmd : 0xAF,
  Normal_Display_Cmd : 0xA6,
  Inverse_Display_Cmd : 0xA7,
  Activate_Scroll_Cmd : 0x2F,
  Dectivate_Scroll_Cmd : 0x2E,
  Set_Brightness_Cmd : 0x81,
  Scroll_Left : 0,
  Scroll_Right : 1,
  Scroll_2Frames : 7,
  Scroll_3Frames : 6,
  Scroll_4Frames : 5,
  Scroll_5Frames : 0,
  Scroll_25Frames : 6,
  Scroll_64Frames : 1,
  Scroll_128Frames : 2,
  Scroll_256Frames : 3
};

var OledDisplay = function(i2cPort,slaveAddress){
  this.i2cPort = i2cPort;
  this.funcQueue = new Array();
  this.index = 0;
  this.seq = null;
  this.addressingMode = OLED_CONST.PAGE_MODE;
};

OledDisplay.prototype = {
  initQ: function(){
    var self = this;
    self.registerQueue(OLED_CONST.Command_Mode,OLED_CONST.Display_Off_Cmd);
    self.registerQueue(OLED_CONST.Command_Mode,OLED_CONST.Display_On_Cmd);
    self.registerQueue(OLED_CONST.Command_Mode,OLED_CONST.Normal_Display_Cmd);
  },
  putCharQ: function(char){
    var self = this;
    var c = char.charCodeAt(0);
    if(c < 32 || c > 127){
      c=32;
    }
    for(var i=0;i<8;i++){
      self.registerQueue(OLED_CONST.Data_Mode,OLED_CONST.BasicFont[c-32][i]);
    }
  },
  putStringQ: function(string){
    var self = this;
    for(var i=0;i < string.length; i++){
      var c =  string.charAt(i);
      self.putCharQ(c);     
    }
  },
  drawStringQ: function(row,col,string){
    var self = this;
    self.setTextXYQ(row,col);
    self.putStringQ(string);
  },
  setBrightnessQ: function(Brightness){
    var self = this;
    self.registerQueue(OLED_CONST.Command_Mode,OLED_CONST.Set_Brightness_Cmd);
    self.registerQueue(OLED_CONST.Command_Mode,Brightness);
  },
  setHorizontalModeQ: function(){
    var self = this;
    self.addressingMode = HORIZONTAL_MODE;
    self.registerQueue(OLED_CONST.Command_Mode,0x20);
    self.registerQueue(OLED_CONST.Command_Mode,0);
  },
  setPageModeQ: function(){
    var self = this;
    self.addressingMode = PAGE_MODE;
    self.registerQueue(OLED_CONST.Command_Mode,0x20);
    self.registerQueue(OLED_CONST.Command_Mode,0x02);
  },
  setTextXYQ: function(row,col){
    var self = this;
    self.registerQueue(OLED_CONST.Command_Mode,0xB0 + row);
    self.registerQueue(OLED_CONST.Command_Mode,0x00 + (8*col & 0x0f));
    self.registerQueue(OLED_CONST.Command_Mode,0x10 + ((8*col>>4)&0x0f));
  },
  clearDisplayQ: function(){
    var self = this;
    for(var j=0;j < 8;j ++){
      self.registerQueue(OLED_CONST.Command_Mode,0xB0+j);
      self.registerQueue(OLED_CONST.Command_Mode,0);
      self.registerQueue(OLED_CONST.Command_Mode,0x10);
      for(var i=0;i < 16;i ++){
        self.putCharQ(' ');
      }
    }
  },
  registerQueue: function(mode,param){
    var self = this;
    if(self.seq != null){
      console.log("OledDisplay.registerQueue(): error! (now playing)");
      return;
    }
    var obj = {};
    obj.mode = mode;
    obj.param = param;
    self.funcQueue.push(obj);
  },
  playSequence: function(){
    var self = this;

    return new Promise(function(resolve, reject){
      self.i2cPort.open(OLED_CONST.Address).then(function(i2cSlave){
        self.i2cSlave = i2cSlave;
　　     if(self.seq != null){
   　      console.log("OledDisplay.playSequence(): error! (multiple call)");
    　　　  reject();
    　   }
        self.seq = setInterval(function(){
          if(self.funcQueue[self.index].mode == OLED_CONST.Command_Mode){
            self.i2cSlave.write8(OLED_CONST.Command_Mode,self.funcQueue[self.index].param);
          }else{
            self.i2cSlave.write8(OLED_CONST.Data_Mode,self.funcQueue[self.index].param);
          }
          self.index ++;
          if(self.index >= self.funcQueue.length){
            clearInterval(self.seq);
            self.seq = null;
            self.index = 0;
            self.funcQueue = [];
            resolve();
          }
        },1);
      });
    });
  },
  init: function(){
    var self = this;
    return new Promise(function(resolve, reject){
      self.i2cPort.open(OLED_CONST.Address).then(function(i2cSlave){
        self.i2cSlave = i2cSlave;
        console.log("i2cPort.open");
        self.initQ();
        self.playSequence().then(function(){resolve()});
      });
    });
  },
  clearDisplay: function(){
    var self = this;
    return new Promise(function(resolve, reject){
      self.i2cPort.open(OLED_CONST.Address).then(function(i2cSlave){
        self.i2cSlave = i2cSlave;
        console.log("start clearDisplay");
        self.clearDisplayQ();
        self.playSequence().then(function(){resolve()});
      });
    });
  },
  drawString: function(row,col,string){
    var self = this;
    return new Promise(function(resolve, reject){
      self.i2cPort.open(OLED_CONST.Address).then(function(i2cSlave){
        self.i2cSlave = i2cSlave;
        console.log("start drawString");
        self.drawStringQ(row,col);
        self.playSequence().then(function(){resolve()});
      });
    });
  }
};
